var store = [{
        "title": "JAVA - String 타입의 두가지 생성 방식",
        "excerpt":"String 타입의 두가지 생성 방식  자바에서 String은 기본형처럼 사용하는 리터럴 방식과 참조형, 즉 객체와 같이 생성하는 new 연산자 생성 방식이 있다.   1. 리터럴 방식     new 연산자 없이 생성이 가능     1 String str = \"abcde\";           String constant pool 메모리 영역에 저장            String constant pool 메모리 영역은 heap 메모리영역 내의 별도 영역에 위치           대부분의 String 객체는 위와 같이 리터럴 방식으로 생성   리터럴 방식의 메모리 관리            상수풀에 문자열의 값이 없을 경우, 값을 저장 후 메모리 주소를 반환한다.       상수풀에 해당 문자열의 값이 있을 경우 해당 문자열의 메모리 주소를 반환한다.       따라서 변수가 다르더라도 문자열의 값이 가튼 경우 메모리 주소를 참조하게 한다.           2. new 연산자 생성 방식     참조형의 기본 객체 생성 방식과 같다.     1 String str = new String(\"abcde\");           다른 참조형 변수와 같이 Heap 메모리 영역에 저장한다.  ","categories": ["java"],
        "tags": ["java"],
        "url": "/java/java-new-String/",
        "teaser": null
      },{
        "title": "Blog - minimal mistake 사이드바 카테고리에 포스트 갯수 추가하기",
        "excerpt":"minimal mistake 사이드바 카테고리에 포스트 갯수 추가하기  초보자가 jekyll과 minimal mistake를 사용하여 블로그를 설정하는 것은 쉽지 않고, 공식 문서를 읽는 것은 고통스럽다. 다행히도 다른 분들이 블로그를 통해서 많은 정보를 공유해주신 덕분에 지금의 간단한 블로그를 설정할 수 있었다. 하지만 단 하나, 사이드바 카테고리에 포스트의 갯수를 추가하는 것은 다른 블로그에서 본대로 설정이 잘 되지 않았다. 그래서 스스로 코드를 변경해보았고, 그것을 공유한다.   사이드바 카테고리에 포스트 갯수?  왼쪽의 사이드바를 본다면 java(1)과 같이 카테고리에 포스팅 갯수가 표시되어 있는 것을 볼 수 있다.   다 필요 없고 코드나 보여주셈  말이 길었다. 전체 코드는 아래와 같다. _include폴더에 nav_list파일에 원래 내용을 지우고, 복사 붙여넣기 하면 된다.   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 {% assign navigation = site.data.navigation[include.nav] %} &lt;nav class=\"nav__list\"&gt;   {% if page.sidebar.title %}&lt;h3 class=\"nav__title\" style=\"padding-left: 0;\"&gt;{{ page.sidebar.title }}&lt;/h3&gt;{% endif %}   &lt;input id=\"ac-toc\" name=\"accordion-toc\" type=\"checkbox\" /&gt;   &lt;label for=\"ac-toc\"&gt;{{ site.data.ui-text[site.locale].menu_label | default: \"Toggle Menu\" }}&lt;/label&gt;   &lt;ul class=\"nav__items\"&gt;     {% for nav in navigation %}       &lt;li&gt;         {% if nav.url %}           &lt;a href=\"{{ nav.url | relative_url }}\"&gt;&lt;span class=\"nav__sub-title\"&gt;{{ nav.title }}&lt;/span&gt;&lt;/a&gt;         {% else %}           &lt;span class=\"nav__sub-title\"&gt;{{ nav.title }}&lt;/span&gt;         {% endif %}          {% if nav.children != null %}         &lt;ul&gt;           {% for child in nav.children %}           {% assign category = site.categories.[child.title] | where_exp: \"item\", \"item.hidden != true\" %}             {%if category.size == null %}               &lt;li&gt;&lt;a href=\"{{ child.url | relative_url }}\"{% if child.url == page.url %} class=\"active\"{% endif %}&gt;{{ child.title }} (0)&lt;/a&gt;&lt;/li&gt;             {% else %}               &lt;li&gt;&lt;a href=\"{{ child.url | relative_url }}\"{% if child.url == page.url %} class=\"active\"{% endif %}&gt;{{ child.title }} ({{category.size}})&lt;/a&gt;&lt;/li&gt;             {% endif %}           {% endfor %}         &lt;/ul&gt;         {% endif %}       &lt;/li&gt;     {% endfor %}   &lt;/ul&gt; &lt;/nav&gt;   약간의 설명  원래 코드에서 바뀐 부분은 17번쨰 줄의 for문 안이다.   원본   1 2 3           {% for child in nav.children %}             &lt;li&gt;&lt;a href=\"{{ child.url | relative_url }}\"{% if child.url == page.url %} class=\"active\"{% endif %}&gt;{{ child.title }}&lt;/a&gt;&lt;/li&gt;           {% endfor %}   바뀐 부분   1 2 3 4 5 6 7 8           {% for child in nav.children %}             {% assign category = site.categories.[child.title] | where_exp: \"item\", \"item.hidden != true\" %}             {%if category.size == null %}               &lt;li&gt;&lt;a href=\"{{ child.url | relative_url }}\"{% if child.url == page.url %} class=\"active\"{% endif %}&gt;{{ child.title }} (0)&lt;/a&gt;&lt;/li&gt;             {% else %}               &lt;li&gt;&lt;a href=\"{{ child.url | relative_url }}\"{% if child.url == page.url %} class=\"active\"{% endif %}&gt;{{ child.title }} ({{category.size}})&lt;/a&gt;&lt;/li&gt;             {% endif %}           {% endfor %}   각각의 카테고리를 찾은 뒤, if, else문을 사용하여 포스트가 아직 올라오지 않은 카테고리에는 0이 추가되고, 글이 있는 카테고리에는 포스트의 갯수를 추가해주었다.   (여러 시도를 통하여 변수를 수정하다가 만든 코드라 문제가 있을 수 있습니다. 문제가 있다면 저도 알려주시기를 부탁드립니다.)  ","categories": ["Blog"],
        "tags": ["Blog","jekyll","minimal mistake","sidebar navigation","sidebar navigation 포스팅 수"],
        "url": "/blog/blog-nav-list-post-number/",
        "teaser": null
      },{
        "title": "JAVA - ChoiceFormat",
        "excerpt":"ChoiceFormat     ChoiceFormat은 특정 범위에 속하는 값을 문자열로 변환해준다.   연속적 또는 불연속적인 범위의 값들을 처리하는 데 있어서 if문이나 switch문은 적절하지 못한 경우가 많은데, ChoiceFormat을 사용하면 값을 간단하고 직관적으로 문자열로 변환할 수 있다.   두 개의 배열 사용  예시1  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import java.text.ChoiceFormat;  public class ChoiceFormatEx1 {     public static void main(String[] args){         double[] limits = {60, 70, 80, 90};//낮은 값부터 큰 값의 순서로 적어야한다.         //limits, grade간의 순서를 맞추어야 한다.         String[] grades = {\"D\", \"C\", \"B\", \"A\"};          int[] scores = {100, 95, 88, 70, 52, 60, 70};          ChoiceFormat form = new ChoiceFormat(limits, grades);          for(int i = 0;i &lt; scores.length;i++){             System.out.println(scores[i]+\":\"+form.format(scores[i]));         }     } }  결과1  1 2 3 4 5 6 7 100:A 95:A 88:B 70:C 52:D 60:D 70:C     double 배열 limits는 범위의 경계값을 저장하는데 사용되었고, String 배열 grades는 범위에 포함될 값을 치환할 문자열을 저장하는데 사용되었다.   경계값은 double형으로 반드시 모두 오름차순으로 정렬되어있어야 한다.   치환될 문자열의 개수는 경계값에 의해 정의된 범위의 개수와 일치해야 한다.   위의 두 조건을 만족하지 않으면 IllegalArgumentException이 발생한다.   패턴 사용  예시2  1 2 3 4 5 6 7 8 9 10 11 12 13 import java.text.ChoiceFormat;  public class ChoiceFormatEx2 {     public static void main(String[] args){         String pattern = \"60#D|70#C|80#B|90#A\";         int[] scores = {91, 90, 80, 88, 70, 52, 60};          ChoiceFormat form = new ChoiceFormat(pattern);         for(int i = 0;i&lt;scores.length;i++){             System.out.println(scores[i] + \":\" + form.format(scores[i]));         }     } }  결과2  1 2 3 4 5 6 7 91:A 90:A 80:B 88:B 70:C 52:D 60:D     예시1에서 두 배열(limits, grades)을 사용하여 문자열을 처리한 것과 달리 예시2에서는 패턴을 사용하였다.   패턴은 구분자로 ‘#’와 ‘&lt;’ 두가지를 제공한다. ‘#’는 경계값을 범위에 포함시키고, ‘&lt;’는 포함시키지 않는다.   limit#value의 형태로 사용한다. ex)60&lt;D|70&lt;C|80&lt;B|90&lt;A   ` ⚠ 이 글은 ‘자바의 정석’과 다른 인터넷의 글들을 참고하여 작성되었습니다 ⚠`  ","categories": ["java"],
        "tags": ["java","formatting class","ChoiceFormat"],
        "url": "/java/java-ChoiceFormat/",
        "teaser": null
      },{
        "title": "JAVA - DecimalFormat",
        "excerpt":"형식화 클래스?     숫자, 날짜, 텍스트 데이터를 일정한 형식에 맞게 표현할 수 있는 방법을 객체지향적으로 설계하여 표준화한 클래스.   형식화 클래스는 형식화에 사용될 패턴을 정의하는데, 데이터를 정의된 패턴에 맞춰 형식화할 수 있을 뿐만 아니라 역으로 형식화된 데이터에서 원래의 데이터를 얻어낼 수도 있다.   java.text패키지에 포함되어 있다.   DecimalFormat     숫자를 형식화하는 형식화 클래스.   숫자 데이터를 정수, 부동소수점, 금액 등의 다양한 형식으로 표현할 수 있다.   반대로 일정한 형식의 텍스트 데이터를 숫자로 쉽게 변한할 수도 있다.   DecimalFormat의 패턴에 사용되는 기호                  기호       의미       패턴       결과                       0       10진수(값이 없을 떄는 0)       0 0.0 0000000000.0000       1234568 1234567.9 0001234567.8900                 #       10진수       # #.# ##########.####       1234568 1234567.9 1234567.89                 .       소수점       #.#       1234567.9                 -       음수부호       #.#- -#.#       1234567.9- -1234567.9                 ,       단위 구분자       #,###,## #,####,##       1,234,567,89 123,4567,89                 E       지수기호       #E0 0E0 ##E0 00E0 ####E0 0000E0 #.#E0 0.0E0 0.000000000E0 00.00000000E0 000.0000000E0 #.#########E0 ##.########E0 ###.#######E0       .1E7 1E6 1.2E6 12E5 123.5E4 1235E3 1.2E6 1.2E6 1.234567890E6 12.34567890E6 123.4567890E4 1.23456789E6 1.23456789E6 1.23456789E6                 ;       패턴구분자       #.###.##+;#.###.##-       1.234.567.89+(양수일 때) 1.234.567.89-(음수일 때)                 %       퍼센트       #.#%       123456789%                 \\u2030       퍼밀(퍼센트 x 10)       #.#\\u2030       1234567890%                 \\u00A4       통화       \\u00A4 #,###       ₩ 1,234,568                 ’       escape문자       ’#’#,### ”#,###       #1,234,568 ‘1,234,568           DecimalFormat의 사용방법     원하는 출력형식의 패턴을 작성하여 DecimalFormat인스턴스를 생성한 다음, 출력하고자 하는 문자열로 format메서드를 호출하면 변환된 문자열을 얻을 수 있다   예시예2  1 2 3 4 double number = 1234567.89; DecimalFormat df = new DecimalFormat(\"#.#E0\"); String result = df.format(number); System.out.println(result);  결과2  1 1.2E6   ` ⚠ 이 글은 ‘자바의 정석’과 다른 인터넷의 글들을 참고하여 작성되었습니다 ⚠`  ","categories": ["java"],
        "tags": ["java","Decimal class","ChoiceFormat"],
        "url": "/java/java-DecimalFormat/",
        "teaser": null
      },{
        "title": "JAVA - MessageFormat",
        "excerpt":"MessageFormat     MessageFormat은 데이터를 정해진 양식에 맞게 출력할 수 있게 해준다.   SimpleDateFormat의 parse처럼 MessageFormat의 parse를 이용하면 지정된 양식에서 필요한 데이터만을 추출할 수 있다.   데이터를 출력  예시1  1 2 3 4 5 6 7 8 9 10 11 12 13 14 import java.text.MessageFormat;  public class MessageFormatEx1 {     public static void main(String[] args){         String msg = \"Name: {0} \\nTel: {1} \\nAge:{2} \\nBirthday:{3}\";          Object[] arguments = {                 \"이자바\", \"02-123-1234\", \"27\", \"07-09\"         };          String result = MessageFormat.format(msg, arguments);         System.out.println(result);     } }     MessageFormat에 사용할 양식인 문자열 msg를 작성할 때 ‘{숫자}’로 표시된 부분이 데이터가 출력될 자리이다.   이 자리는 순차적일  필요는 없고, 여러 번 반복해서 사용할 수도 있다.   사용되는 숫자는 배열처럼 인덱스가 0부터 시작하며, 양식에 들어갈 데이터는 객체배열인 arguments에 지정되어 있다.   arguments는 객체배열이므로 String 이외에도 다른 객체들이 지정될 수 있으며, 이 경우 세부적인 옵션들이 사용될 수 있다.   데이터를 추출  예시2  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import java.text.MessageFormat;  public class MessageFormatEx3 {     public static void main(String[] args) throws Exception{         String[] data = {                 \"INSERT INTO CUST_INFO VALUES ('이자바', '02-123-1234', 27, '07-09');\",                 \"INSERT INTO CUST_INFO VALUES ('김프로', '032-333-1234', 33, '10-07');\",         };          String pattern = \"INSERT INTO CUST_INFO VALUES (''{0}'', ''{1}'', {2}, ''{3}'');\";         MessageFormat mf = new MessageFormat(pattern);          for(int i = 0; i &lt; data.length;i++){             Object[] objs = mf.parse(data[i]);             for(int j = 0; j &lt; objs.length; j++)                 System.out.print (objs[j] + \",\");             System.out.println();         }     } }     parse(String source)를 이용하여 출력된 데이터로부터 필요한 데이터만을 추출하였다.   홀따옴표(‘)는 MessageFormat 양식의 escape문자로 사용되기 때문에 문자열 pattern에 홀따옴표를 사용하려면 홀따옴표를 연속으로 두번 사용해야 한다.   ` ⚠ 이 글은 ‘자바의 정석’과 다른 인터넷의 글들을 참고하여 작성되었습니다 ⚠`  ","categories": ["java"],
        "tags": ["java","formatting class","MessageFormat"],
        "url": "/java/java-MessageFormat/",
        "teaser": null
      },{
        "title": "JAVA - SimpleDateFormat",
        "excerpt":"SimpleDateFormat     Date와 Calendar만으로 날짜 데이터를 원하는 형태로 다양하게 출력하는 것은 불편하다.   SimpleDateFormat을 사용하면 날짜 데이터를 원하는 형태로 다양하게 출력할 수 있다.   SimpleDateFormat의 패턴에 사용되는 기호                  기호       의미       보기                       G       연대(BC, AD)       AD                 y       연도       2006                 M       월(1~12 또는 1월~12월)       10 또는 10월, OCT                 w       년의 몇 번째 주(1~53)       50                 W       월의 몇 번째 주(1~53)       5월                 D       년의 몇 번째 일(1~366)       100                 d       월의 몇 번쨰 일(1~31)       15                 F       월의 몇 번쨰 요일(1~5)       1                 E       요일       월                 a       오전/오후(AM, PM)       PM                 H       시간(0~23)       20                 k       시간(1~24)       13                 K       시간(0~11)       10                 h       시간(1~12)       11                 m       분(0~59)       35                 s       초(0~59)       55                 S       천분의 일초(0~999)       253                 z       Time zone(RFC 822 time zone)       +0900                 ’       escape문자(특수문자를 표현하는데 사용)       없음           SimpleDateFormat의 사용 방법     SimpleDateFormat을 사용하려면 원하는 패턴을 작성하여 SimpleDateFormat인스턴스를 생성한 뒤, 출력하고자 하는 Date인스턴스를 가지고 format(Date d)메소드를 호출하면 지정한 출력형식에 맞게 변환된 문자열을 얻게 된다.   예시  1 2 3 4 5 6 Date today = new Date(); SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");  // 오늘 날짜를 yyyy-MM-dd 형태로 변환하여 반환한다. String result = df.format(today); System.out.println(result);  결과  1 2024-01-20  ` ⚠ 이 글은 ‘자바의 정석’과 다른 인터넷의 글들을 참고하여 작성되었습니다 ⚠`  ","categories": ["java"],
        "tags": ["java","formatting class","SimpleDateFormat"],
        "url": "/java/java-SimpleDateFormat/",
        "teaser": null
      }]
